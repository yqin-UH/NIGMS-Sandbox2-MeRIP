/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module
        ext.args2  = Second set of arguments (for multi-tool modules)
        ext.args3  = Third set of arguments (for multi-tool modules)
        ext.prefix = File name prefix for output files
        ext.when   = Conditional execution criteria
----------------------------------------------------------------------------------------
*/

process {
    // Default publishDir settings for all processes
    /*
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ] 
    */

    // Quality Control Modules
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Alignment Module
    withName: STAR_ALIGN {
        ext.args = '--outFilterMismatchNmax 2'
    }

    // Save alignment
    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_SORT' {
        publishDir = [
            path: { "${params.outdir}/sorted_alignment" },
            mode: params.publish_dir_mode,
            pattern: "*.bam"
        ]
    }
    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/sorted_alignment" },
            mode: params.publish_dir_mode,
            pattern: "*.bai"
        ]
    }

    // Generate bigwig files
    withName: '.*:BAM_BEDGRAPH_BIGWIG_BEDTOOLS_UCSC:BEDTOOLS_GENOMECOV' {
        ext.args   = { (meta.single_end && params.fragment_size > 0) ? "-fs ${params.fragment_size}" : '' }
        ext.prefix = { "${meta.id}.mLB.clN" }
    }

    withName: '.*:BAM_BEDGRAPH_BIGWIG_BEDTOOLS_UCSC:UCSC_BEDGRAPHTOBIGWIG' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bigwig" },
            mode: params.publish_dir_mode,
            pattern: "*.bigWig"
        ]
    }

    // RSEM for input samples
    withName: '.*:RSEM_PREPAREREFERENCE' {
        ext.args   = '--star'
        publishDir = [
            path: { params.save_reference ? "${params.outdir}/star_rsem_index" : params.outdir },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename != 'versions.yml' && params.save_reference) ? filename : null }
        ]
    }
        withName: '.*:QUANTIFY_RSEM:RSEM_CALCULATEEXPRESSION' {
            ext.args   = [
                '--star',
                '--star-output-genome-bam',
                '--star-gzipped-read-file',
                '--estimate-rspd',
                '--seed 1'
            ].join(' ').trim()
            publishDir = [
                enabled:false
            ]
        }

        withName: '.*:QUANTIFY_RSEM:RSEM_MERGE_COUNTS' {
            publishDir = [
                path: { "${params.outdir}/input_rnaseq/star_rsem" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

    // Peak Calling Modules
    withName: 'MACS3_CALLPEAK' {
        ext.args = [
            '--keep-dup all',
            '--qvalue 0.01',
            '--format BAM',
            '--nomodel'
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/peak_calling/macs3/per_sample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'EXOMEPEAK2_SINGLE' {
        ext.prefix = { "${meta.id}_peaks" }
        publishDir = [
            // BED files (peak calls)
            [   
                path: { "${params.outdir}/peak_calling/exomepeak2/per_sample/bed" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    filename == 'peaks.bed' ? "${task.ext.prefix}.bed" : null
                }
            ],
            // CSV files (peak statistics)
            [   
                path: { "${params.outdir}/peak_calling/exomepeak2/per_sample/csv" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    filename == 'peaks.csv' ? "${task.ext.prefix}.csv" : null
                }
            ],
            // PDF files (GC bias plots)
            [   
                path: { "${params.outdir}/peak_calling/exomepeak2/per_sample/gc_plots" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    filename == 'gc_fit.pdf' ? "${task.ext.prefix}_gc.pdf" : null
                }
            ],
            // Versions file (root directory)
            [   
                path: { "${params.outdir}/peak_calling/exomepeak2/per_sample" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> 
                    filename == 'versions.yml' ? "versions.yml" : null
                }
            ]
        ]
    }

    withName: 'EXOMEPEAK2_CONSENSUS' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            // Main output directory for all files
            path: { "${params.outdir}/peak_calling/exomepeak2/per_group/${task.ext.prefix}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if (filename == 'peaks.bed')     return "${task.ext.prefix}.bed"
                else if (filename == 'peaks.csv') return "${task.ext.prefix}.csv"
                else if (filename == 'gc_fit.pdf')    return "${task.ext.prefix}_gc.pdf"
                else if (filename == 'versions.yml')  return "versions.yml"
                else if (filename.endsWith('.RData')) return filename  // Keep RData files
                else null  // Don't publish other files
            }
        ]
    }

    withName: 'EXOMEPEAK2_DIFF' {
        ext.prefix = { "${contrast}" }
        publishDir = [
            // Main output directory for all files
            path: { "${params.outdir}/differential_peaks/exomepeak2/${task.ext.prefix}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> 
                if (filename == 'diffPeaks.bed')     return "${task.ext.prefix}.bed"
                else if (filename == 'diffPeaks.csv') return "${task.ext.prefix}.csv"
                else if (filename == 'gc_fit.pdf')    return "${task.ext.prefix}_gc.pdf"
                else if (filename == 'versions.yml')  return "versions.yml"
                else if (filename.endsWith('.RData')) return filename  // Keep RData files
                else null  // Don't publish other files
            }
        ]
    }

    withName: 'FRIP_SCORE' {
        ext.args = '-bed -c -f 0.20'
        publishDir = [
            enabled: false
        ]
    }
}

// Peak Annotation Section
if (!params.skip_peak_annotation) {
    process {
        withName: '.*:PEAKS_CALL_MACS3_HOMER:HOMER_ANNOTATEPEAKS' {
            ext.args = '-gid'
            ext.prefix = { "${meta.id}_peaks" }
            publishDir = [
                path: { "${params.outdir}/peak_calling/macs3/per_sample/annotated" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // Peak QC Section
    if (!params.skip_peak_qc) {
        process {
            withName: 'PLOT_MACS3_QC' {
                ext.args = '-o ./ -p macs3_peak'
                publishDir = [
                    path: { "${params.outdir}/peak_calling/macs3/per_sample" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: 'PLOT_HOMER_ANNOTATEPEAKS' {
                ext.args = '-o ./'
                ext.prefix = 'macs3_annotatePeaks'
                publishDir = [
                    path: { "${params.outdir}/peak_calling/macs3/per_sample/" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

// Consensus Peaks Section
if (!params.skip_consensus_peaks) {
    process {
        withName: 'MACS3_CONSENSUS' {
            ext.when = { meta.multiple_groups || meta.replicates_exist }
            ext.prefix = { "${meta.id}.consensus_peaks" }
            publishDir = [
                path: { "${params.outdir}/peak_calling/macs3/per_group/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'SUBREAD_FEATURECOUNTS' {
            ext.args = '-F SAF -O --fracOverlap 0.2'
            ext.prefix = { "${meta.id}.consensus_peaks" }
            publishDir = [
                path: { "${params.outdir}/peak_calling/macs3/per_group/${meta.id}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    // Consensus Peak Annotation
    if (!params.skip_peak_annotation) {
        process {
            withName: '.*:BED_CONSENSUS_MACS3:HOMER_ANNOTATEPEAKS' {
                ext.args = '-gid'
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}/peak_calling/macs3/per_group/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

            withName: 'ANNOTATE_BOOLEAN_PEAKS' {
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}//peak_calling/macs3/per_group/${meta.id}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    // Differential Analysis Section
    if (!params.skip_deseq2_qc) {
        process {
            withName: 'DESEQ2_QC' {
                ext.when = { meta.multiple_groups && meta.replicates_exist }
                ext.args = [
                    '--id_col 1',
                    '--sample_suffix \'.mLb.clN.sorted.bam\'',
                    '--count_col 7',
                    params.deseq2_vst ? '--vst TRUE' : ''
                ].join(' ').trim()
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { "${params.outdir}/peak_calling/macs3/per_group/${meta.id}/deseq2" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}